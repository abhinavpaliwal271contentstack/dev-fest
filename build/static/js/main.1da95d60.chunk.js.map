{"version":3,"sources":["reportWebVitals.ts","components/ErrorBoundary/index.tsx","common/utils/index.ts","containers/ConfigScreen/index.tsx","common/locale/en-us/index.ts","containers/SidebarWidget/index.tsx","containers/DashboardWidget/index.tsx","containers/CustomField/index.tsx","containers/App/index.tsx","index.tsx"],"names":["reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ErrorBoundary","props","state","hasError","error","errorInfo","console","Error","this","children","warn","React","Component","utils","mergeObjects","target","source","Object","keys","forEach","key","assign","conditions","value","label","id","RenderOption","parentState","applicablePath","formik","path","log","contenttypes","content_types","contentType","condition","className","selectLabel","undefined","onChange","val","setFieldValue","options","getFieldOptions","width","fetchContentTypes","fetch","headers","api_key","authorization","response","text","data","JSON","parse","contentTypes","uid","selectType","find","el","schema","map","display_name","getOption","title","ConfigScreen","useState","installationData","configuration","configField1","serverConfiguration","setInstallationData","appSdkInitialized","setState","useEffect","ContentstackAppSdk","init","appSdk","sdkConfigData","location","AppConfigWidget","installation","getInstallationData","installationDataFromSDK","setInstallationDataOfSDK","useFormik","initialValues","name","stackApiKey","enabled","pathApplicable","operation","fields","currentField","newField","onSubmit","stringify","length","style","type","size","onClick","values","toggle","i","border","padding","margin","borderRadius","display","paddingRight","alignItems","required","htmlFor","handleChange","marginTop","marginLeft","checked","j","paddingTop","marginRight","icon","submitForm","localeTexts","configFields","field1","help","placeholder","instruction","customField","placeHolder","sidebarWidget","titleCaption","SidebarWidget","entryData","setEntryData","config","getConfig","entryDataFromSDK","entry","getData","DashboardWidget","paddingLeft","paddingBottom","labelPosition","CustomField","setValue","initialData","field","setData","maxLength","event","HomeRedirectHandler","window","pathname","to","App","element","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.1da95d60.chunk.js","sourcesContent":["import { ReportHandler } from \"web-vitals\";\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import(\"web-vitals\").then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\n\ninterface MyProps {}\n\ninterface MyState {\n  hasError: boolean;\n}\n\nclass ErrorBoundary extends React.Component<MyProps, MyState> {\n  constructor(props: any) {\n    super(props);\n    this.state = { hasError: false };\n  }\n\n  static getDerivedStateFromError(error: any) {\n    // Update state so the next render will show the fallback UI.\n    console.warn(error); // Remove this line if not required.\n    return { hasError: true };\n  }\n\n  componentDidCatch(error: any, errorInfo: any) {\n    // You can also log the error to an error reporting service\n    // logErrorToMyService(error, errorInfo);\n    console.error(\"errorInfo \", errorInfo);\n    throw new Error(errorInfo);\n  }\n\n  render() {\n    if (this.state.hasError) {\n      // You can render any custom fallback UI\n      return <h1>Something went wrong.</h1>;\n    }\n\n    return this.props.children;\n  }\n}\n\nexport default ErrorBoundary;\n","const mergeObjects = (target: any, source: any) => {\n  // Iterate through `source` properties and if an `Object` then\n  // set property to merge of `target` and `source` properties\n  Object.keys(source)?.forEach((key) => {\n    if (source[key] instanceof Object && key in target) {\n      Object.assign(source[key], mergeObjects(target[key], source[key]));\n    }\n  });\n\n  // Join `target` and modified `source`\n  Object.assign(target || {}, source);\n  return target;\n};\n\nconst utils = {\n  mergeObjects,\n};\n\nexport default utils;\n","/* Import React modules */\nimport React, { useState, useEffect } from \"react\";\n/* Import other node modules */\nimport {\n  FieldLabel,\n  TextInput,\n  ToggleSwitch,\n  Button,\n  Select,\n  Tooltip,\n  Icon\n} from \"@contentstack/venus-components\";\nimport ContentstackAppSdk from \"@contentstack/app-sdk\";\n/* Import our modules */\nimport localeTexts from \"../../common/locale/en-us\";\nimport utils from \"../../common/utils\";\n// import { getDataFromAPI } from '../../services'; //If no services are required, this can be removed\\\n/* Import node module CSS */\nimport \"@contentstack/venus-components/build/main.css\";\n/* Import our CSS */\nimport \"./styles.scss\";\nimport { useFormik } from \"formik\";\n\n\nconst conditions = [\n  {\n    value: \"add\",\n    label: \"Add\",\n    id: \"add\"\n  },\n  {\n    value: \"update\",\n    label: \"Update\",\n    id: \"update\"\n  },\n  {\n    value: \"delete\",\n    label: \"Delete\",\n    id: \"delete\"\n  }\n];\n\n/* eslint-disable */\nconst ConfigScreen: React.FC = function () {\n  const [state, setState] = useState<any>({\n    installationData: {\n      configuration: {\n        /* Add all your config fields here */\n        /* The key defined here should match with the name attribute\n        given in the DOM that is being returned at last in this component */\n        configField1: \"\",\n      },\n      serverConfiguration: {},\n    },\n    setInstallationData: (): any => { },\n    appSdkInitialized: false,\n  });\n\n  useEffect(() => {\n    ContentstackAppSdk.init().then(async (appSdk) => {\n      const sdkConfigData = appSdk?.location?.AppConfigWidget?.installation;\n      if (sdkConfigData) {\n        const installationDataFromSDK =\n          await sdkConfigData.getInstallationData();\n        const setInstallationDataOfSDK = sdkConfigData.setInstallationData;\n        const contenttypes = await fetchContentTypes();\n        setState({\n          ...state,\n          installationData: utils.mergeObjects(\n            state.installationData,\n            installationDataFromSDK\n          ),\n          setInstallationData: setInstallationDataOfSDK,\n          appSdkInitialized: true,\n          contenttypes: contenttypes\n        });\n      }\n    });\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  /** updateConfig - Function where you should update the state variable\n   * Call this function whenever any field value is changed in the DOM\n   * */\n  const updateConfig = async (e: any) => {\n    // eslint-disable-next-line prefer-const\n    let { name: fieldName, value: fieldValue } = e.target;\n    const updatedConfig = state?.installationData?.configuration || {};\n    updatedConfig[fieldName] = fieldValue;\n\n    const updatedServerConfig = state.installationData.serverConfiguration;\n    updatedServerConfig[fieldName] = fieldValue;\n\n    if (typeof state.setInstallationData !== \"undefined\") {\n      await state.setInstallationData({\n        ...state.installationData,\n        configuration: updatedConfig,\n        serverConfiguration: updatedServerConfig,\n      });\n    }\n\n    return true;\n  };\n\n  const formik = useFormik({\n    initialValues: {\n      data: [{\n        name: \"\",\n        stackApiKey: \"blt24dcf2e98f671ca5\",\n        enabled: false,\n        pathApplicable: [\n          {\n            contentType: \"\",\n            operation: \"\",\n            fields: {\n              currentField: \"\",\n              newField: \"\"\n            }\n          }\n        ]\n      }]\n    },\n    onSubmit: (value) => {\n      console.log(JSON.stringify(value))\n    }\n  })\n\n  if (!state?.contenttypes?.content_types?.length) {\n    return <></>\n  }\n  return (\n    <div className=\"layout-container\">\n      <div className=\"page-wrapper\">\n        <div className=\"config-wrapper\">\n          <>\n            <div style={{ width: '200px' }}>\n              <Button type=\"button\" size=\"large\" onClick={() => formik.setFieldValue('data', [...formik.values.data, {\n                name: \"\",\n                stackApiKey: \"blt24dcf2e98f671ca5\",\n                enabled: false,\n                pathApplicable: [\n                  {\n                    contentType: \"\",\n                    operation: \"\",\n                    fields: {\n                      currentField: \"\",\n                      newField: \"\"\n                    }\n                  }\n                ]\n              }]\n              )}>+ Feature Toggle</Button>\n\n            </div>\n            {formik.values?.data.map((toggle, i) => {\n              return (\n                <div style={{ border: '2px solid #647696', padding: '10px', margin: '10px', borderRadius: '10px', width: '760px' }}>\n                  <div style={{ display: 'flex', paddingRight: '50px', alignItems: \"flex-start\" }}>\n                    <div>\n                      <FieldLabel required={true} htmlFor=\"\">Toggle Key</FieldLabel>\n                      <TextInput value={toggle.name} onChange={formik.handleChange} name={`data.${i}.name`} width=\"medium\" />\n                    </div>\n                    <div style={{ marginTop: '5px', marginLeft: '500px' }}>\n                      <ToggleSwitch\n                        onClick={() => formik.setFieldValue(`data[${i}].enabled`, !toggle.enabled)}\n                        checked={toggle.enabled}\n                      />\n                    </div>\n                  </div>\n\n                  {toggle?.pathApplicable.map((applicablePath: any, j) => {\n                    return (<div style={{ display: 'flex', paddingTop: '10px' }}>\n                      <Select\n                        selectLabel={\"ContentType\"}\n                        value={getOption(state.contenttypes.content_types)?.find((el: any) => el.value === applicablePath.contentType)}\n                        onChange={(val: any) => formik.setFieldValue(`data[${i}].pathApplicable[${j}].contentType`, val.value)}\n                        options={getOption(state.contenttypes.content_types)}\n                        width=\"180px\"\n                      />\n                      {!!applicablePath.contentType && <div className=\"ml-20\">\n                        <Select\n                          selectLabel={\"Condition\"}\n                          value={conditions.find(el => (el.value === applicablePath.condition))}\n                          onChange={(val: any) => formik.setFieldValue(`data[${i}].pathApplicable[${j}].condition`, val.value)}\n                          options={conditions}\n                          width=\"180px\"\n\n                        /></div>}\n                      {!!applicablePath.condition && <RenderOption parentState={state} applicablePath={applicablePath} path={`data[${i}].pathApplicable[${j}].`} formik={formik} />}\n                    </div>)\n                  })}\n                  <Button className=\"mt-10 mr-10\" onClick={() => {\n                    formik.setFieldValue(`data[${i}].pathApplicable`, [\n                      ...toggle?.pathApplicable,\n                      {\n                        contentType: \"\",\n                        operation: \"\",\n                        fields: {\n                          currentField: \"\",\n                          newField: \"\"\n                        }\n                      }\n                    ])\n                  }}>\n                    Add new Entry\n                  </Button>\n                </div>)\n            })}\n          </>\n        </div>\n      </div>\n      <div style={{ width: '100px', marginLeft: 'auto', marginRight: '20px' }}><Button icon=\"save\" onClick={formik.submitForm}>Save Button </Button></div>\n    </div>\n  );\n};\n\n\nconst RenderOption = ({ parentState, applicablePath, formik, path }: { parentState: any, applicablePath: any, formik: any, path: any }) => {\n  console.log(parentState.contenttypes.content_types, parentState.contentType)\n  if ((applicablePath.condition === \"add\") || (applicablePath.condition === \"delete\")) {\n    return (<div className=\"ml-20\">\n      <Select\n        selectLabel={\"New Field\"}\n        value={undefined}\n        onChange={(val: any) => formik.setFieldValue(path + \"newField\", val.value)}\n        options={getFieldOptions(parentState.contenttypes.content_types, applicablePath.contentType)}\n        width=\"180px\"\n      />\n    </div>)\n  }\n  return (\n    <>\n      <div className=\"ml-20\">\n        <Select\n          selectLabel={\"Current Field\"}\n          value={undefined}\n          onChange={(val: any) => formik.setFieldValue(path + \"currentField\", val.value)}\n          options={getFieldOptions(parentState.contenttypes.content_types, applicablePath.contentType)}\n          width=\"180px\"\n        />\n      </div>\n      <div className=\"ml-20\">\n        <Select\n          selectLabel={\"New Field\"}\n          value={undefined}\n          onChange={(val: any) => formik.setFieldValue(path + \"newField\", val.value)}\n          options={getFieldOptions(parentState.contenttypes.content_types, applicablePath.contentType)}\n          width=\"180px\"\n        />\n      </div>\n    </>)\n}\n\nconst fetchContentTypes = async () => {\n  const response = await fetch('https://api.contentstack.io/v3/content_types', {\n    headers: {\n      api_key: \"blt24dcf2e98f671ca5\",\n      authorization: \"csfa4b66976f8fc80c114c87cb\"\n    }\n  })\n  const data = await response.text()\n  return JSON.parse(data)\n}\n\n\nconst getFieldOptions = (contentTypes: any, uid: string) => {\n\n  const selectType = contentTypes.find((el: any) => el.uid === uid)?.schema;\n  return selectType?.map((el: any) => ({\n    value: el.uid,\n    label: el.display_name,\n    id: el.uid\n  }))\n}\nconst getOption = (contentTypes: any) => {\n  return contentTypes.map((el: any) => ({\n    value: el.uid,\n    label: el.title,\n    id: el.uid\n  }))\n}\n\n\nexport default ConfigScreen;\n","const localeTexts = {\n  configFields: {\n    field1: {\n      label: \"Config Field 1\",\n      help: \"Help text for field 1\",\n      placeholder: \"Field 1\",\n      instruction: \"Instruction for field 1\",\n    },\n  },\n  customField: {\n    placeHolder: \"Enter your name\"\n  },\n  sidebarWidget: {\n    titleCaption: \"Title - \"\n  },\n};\n\nexport default localeTexts;\n","/* Import React modules */\nimport React, { useEffect, useState } from \"react\";\n/* Import other node modules */\nimport ContentstackAppSdk from \"@contentstack/app-sdk\";\nimport { FieldLabel } from \"@contentstack/venus-components\";\nimport { TypeSDKData, TypeEntryData } from \"../../common/types\";\n/* Import our modules */\nimport localeTexts from \"../../common/locale/en-us\";\n/* Import node module CSS */\n/* Import our CSS */\nimport \"./styles.scss\";\n\nconst SidebarWidget: React.FC = function () {\n  const [entryData, setEntryData] = useState<TypeEntryData>({ title: \"\" });\n  const [state, setState] = useState<TypeSDKData>({\n    config: {},\n    location: {},\n    appSdkInitialized: false,\n  });\n\n  useEffect(() => {\n    ContentstackAppSdk.init().then(async (appSdk) => {\n      const config = await appSdk?.getConfig();\n\n      const entryDataFromSDK =\n        appSdk?.location?.SidebarWidget?.entry?.getData();\n      setEntryData(entryDataFromSDK); // entryData is the whole entry object from CMS that contains all the data in the current entry for which sidebar is opened.\n      setState({\n        config,\n        location: appSdk.location,\n        appSdkInitialized: true,\n      });\n    });\n  }, []);\n\n  return (\n    <div className=\"layout-container\">\n      abcd\n      {state.appSdkInitialized && (\n        // <>\n        // Your sidebar UI must be developed here based on the state variable\n        // {`Your current state is ${JSON.stringify(state)}`}\n        // {`Your current entryData is ${JSON.stringify(entryData)}`}\n        // </>\n        <div className=\"sidebar-wrapper\">\n          <FieldLabel\n            htmlFor={state?.config?.configField1}\n            className=\"sidebar-field\"\n          >\n            {state.config.configField1}\n          </FieldLabel>\n          <div className=\"entry-wrapper\">\n            <FieldLabel htmlFor=\"entry-title\" className=\"sidebar-field\">\n              {localeTexts.sidebarWidget.titleCaption}\n            </FieldLabel>\n            <FieldLabel htmlFor={entryData?.title} className=\"sidebar-field\">\n              {entryData?.title}\n            </FieldLabel>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default SidebarWidget;\n","/* Import React modules */\nimport React, { useEffect, useState } from \"react\";\n/* Import other node modules */\nimport ContentstackAppSdk from \"@contentstack/app-sdk\";\nimport { Button, FieldLabel, Select, TextInput, ToggleSwitch } from \"@contentstack/venus-components\";\nimport { TypeSDKData } from \"../../common/types\";\n/* Import our modules */\n/* Import node module CSS */\n/* Import our CSS */\nimport \"./styles.scss\";\nimport { useFormik } from \"formik\";\n\n\nconst conditions = [\n  {\n    value: \"add\",\n    label: \"Add\",\n    id: \"add\"\n  },\n  {\n    value: \"update\",\n    label: \"Update\",\n    id: \"update\"\n  },\n  {\n    value: \"delete\",\n    label: \"Delete\",\n    id: \"delete\"\n  }\n];\nconst DashboardWidget: React.FC = function () {\n  const [state, setState] = useState<any>({\n    config: {},\n    location: {},\n    appSdkInitialized: false,\n    contenttypes: undefined\n  });\n\n  useEffect(() => {\n    ContentstackAppSdk.init().then(async (appSdk) => {\n      const config = await appSdk.getConfig();\n      // appSdk?.location?.DashboardWidget?.frame?.enableAutoResizing?.();\n      const contenttypes = await fetchContentTypes();\n      setState({\n        config,\n        location: appSdk.location,\n        appSdkInitialized: true,\n        contenttypes: contenttypes\n      });\n      console.log(getOption(contenttypes.content_types))\n    });\n  }, []);\n\n  const formik = useFormik({\n    initialValues: { data: [] },\n    onSubmit: (value) => {\n      console.log(value)\n    }\n  })\n  console.log(formik.values)\n  return (\n    <div className=\"layout-container\">\n      {state.appSdkInitialized && (\n        <>\n          <div style={{ width: '200px', paddingLeft: '20px', paddingBottom: '20px' }}>\n            <Button type=\"button\" size=\"large\" onClick={() => formik.setFieldValue('data', [...formik.values.data, {\n              name: \"\",\n              stackApiKey: \"\",\n              enabled: false,\n              pathApplicable: [\n                {\n                  contentType: \"\",\n                  operation: \"\",\n                  fields: {\n                      currentField: \"\",\n                      newField: \"\"\n                  }\n              }\n              ]\n            }]\n            )}>+ Feature Toggle</Button>\n          </div>\n          {formik.values?.data.map((el, i) => (\n            <div style={{ border: '4px solid #6c5ce7', padding: '10px', margin: '10px', borderRadius: '10px' }}>\n              <div style={{ display: 'flex', paddingRight: '50px', alignItems: \"flex-start\" }}>\n                <div>\n                  <FieldLabel required={true} htmlFor=\"\">Toggle Key</FieldLabel>\n                  <TextInput value={(formik.values.data[i] as any).name} onChange={formik.handleChange} name={`data.${i}.name`} />\n                </div>\n                <ToggleSwitch\n                  label=\"Status\"\n                  labelPosition={\"left\"}\n                  onClick={() => formik.setFieldValue(`data[${i}].enabled`, !(formik.values.data[i] as any).enabled)}\n                  checked={(formik.values.data[i] as any).enabled}\n                />\n              </div>\n\n              {(formik.values.data[i] as any)?.pathApplicable.map((el: any, j: any) => (<div style={{ display: 'flex', paddingTop: '10px' }}>\n                <Select\n                  selectLabel={\"ContentType\"}\n                  value={(formik.values.data[i] as any).pathApplicable[j].contentType}\n                  onChange={(val: any) => formik.setFieldValue(`data[${i}].enabled.pathApplicable[${j}].contentType`, val)}\n                  options={getOption(state.contenttypes.content_types)}\n                />\n                -\n                <Select\n                  selectLabel={\"Condition\"}\n                  value={undefined}\n                  onChange={(val: any) => formik.setFieldValue(`data[${i}].enabled.pathApplicable[${j}].contentType`, val)}\n                  options={conditions}\n                /> -\n                <Select\n                  selectLabel={\"ContentType\"}\n                  value={undefined}\n                  onChange={(val: any) => console.log(val)}\n                  options={getOption(state.contenttypes.content_types)}\n                />\n              </div>))}\n            </div>))}\n        </>\n      )}\n    </div>\n  );\n};\n\n\n\nconst fetchContentTypes = async () => {\n  const response = await fetch('https://api.contentstack.io/v3/content_types', {\n    headers: {\n      api_key: \"blt24dcf2e98f671ca5\",\n      authorization: \"csfa4b66976f8fc80c114c87cb\"\n    }\n  })\n  const data = await response.text()\n  return JSON.parse(data)\n}\n\nconst getOption = (contentTypes: any) => {\n  return contentTypes.map((el: any) => ({\n    value: el.uid,\n    label: el.title,\n    id: el.uid\n  }))\n}\n\nexport default DashboardWidget;\n","/* Import React modules */\nimport React, { useEffect, useState } from \"react\";\n/* Import other node modules */\nimport ContentstackAppSdk from \"@contentstack/app-sdk\";\nimport { FieldLabel, TextInput } from \"@contentstack/venus-components\";\nimport { TypeSDKData } from \"../../common/types\";\n/* Import our modules */\nimport localeTexts from \"../../common/locale/en-us\";\n/* Import node module CSS */\n/* Import our CSS */\nimport \"./styles.scss\";\n\n/* To add any labels / captions for fields or any inputs, use common/local/en-us/index.ts */\n\nconst CustomField: React.FC = function () {\n  const [state, setState] = useState<TypeSDKData>({\n    config: {},\n    location: {},\n    appSdkInitialized: false,\n  });\n\n  const [value, setValue] = useState(\"\");\n\n  useEffect(() => {\n    ContentstackAppSdk.init().then(async (appSdk) => {\n      const config = await appSdk?.getConfig();\n      const initialData = appSdk?.location?.CustomField?.field?.getData();\n      if (initialData?.name && Object.keys(initialData.name).length !== 0) {\n        setValue(initialData?.name);\n      }\n      setState({\n        config,\n        location: appSdk.location,\n        appSdkInitialized: true,\n      });\n    });\n  }, []);\n\n  useEffect(() => {\n    state?.location?.CustomField?.field?.setData({ name: value });\n  }, [value]);\n\n  return (\n    <div className=\"layout-container\">\n      {state.appSdkInitialized && (\n        // <>\n        //   Your Custom Field must be developed here based on the state variable\n        //   {`Your current state is ${JSON.stringify(state)}`}\n        // </>\n        <>\n          <FieldLabel htmlFor={state?.config?.configField1} className=\"field\">\n            {state.config.configField1}\n          </FieldLabel>\n          <div className=\"field-wrapper\">\n            <FieldLabel htmlFor={state?.config?.name} className=\"field\">\n              Name\n            </FieldLabel>\n            <TextInput\n              className=\"field\"\n              maxLength={50}\n              value={value}\n              width=\"large\"\n              placeholder={localeTexts.customField.placeHolder}\n              onChange={(event: any) => setValue(event?.target?.value)}\n              name=\"name\"\n            />\n          </div>\n        </>\n      )}\n    </div>\n  );\n};\n\nexport default CustomField;\n","/* Import React modules */\nimport React from \"react\";\nimport { HashRouter, Route, Routes, Navigate } from \"react-router-dom\";\n/* Import other node modules */\n/* Import our modules */\nimport ErrorBoundary from \"../../components/ErrorBoundary\";\nimport ConfigScreen from \"../ConfigScreen\";\nimport SidebarWidget from \"../SidebarWidget\";\nimport DashboardWidget from \"../DashboardWidget\";\nimport CustomField from \"../CustomField\";\n/* Import node module CSS */\nimport \"@contentstack/venus-components/build/main.css\";\n/* Import our CSS */\nimport \"./styles.scss\";\n\nconst HomeRedirectHandler = function () {\n  if (window?.location?.pathname !== \"/\") {\n    return <Navigate to={{ pathname: window.location.pathname }} />;\n  }\n  return null;\n};\n\nconst App: React.FC = function () {\n  return (\n    <div className=\"app\">\n      <ErrorBoundary>\n        <HashRouter>\n          {/* If the path is changed here,\n              be sure to update the path for corresponding UI location\n              in Update App API */\n          /* Below list has all the possible UI paths\\.\n              Keep only the paths that are required for your app and\n              remove the remaining paths and their source code also. */}\n          <Routes>\n            <Route path=\"/\" element={<HomeRedirectHandler />} />\n            <Route path=\"/config\" element={<ConfigScreen />} />\n            <Route path=\"/sidebar-widget\" element={<SidebarWidget />} />\n            <Route path=\"/dashboard-widget\" element={<DashboardWidget />} />\n            <Route path=\"/custom-field\" element={<CustomField />} />\n          </Routes>\n        </HashRouter>\n      </ErrorBoundary>\n    </div>\n  );\n};\n\nexport default App;\n","/* Import React modules */\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\n/* Import other node modules */\nimport reportWebVitals from \"./reportWebVitals\";\n/* Import our modules */\nimport App from \"./containers/App\";\n/* Import node module CSS */\n/* Import our CSS */\nimport \"./index.css\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}